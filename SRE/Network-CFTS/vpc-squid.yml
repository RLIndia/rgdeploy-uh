AWSTemplateFormatVersion: '2010-09-09'

Description: Provision the required resources for Secure research product Network settings with Squid proxy.

Parameters:

  AmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    Description: AMI ID pointer in AWS Systems Manager Parameter Store. Default value points to the
      latest Amazon Linux 2 AMI ID.

  InstanceType:
    Type: String
    Default: t3.nano
    Description: Instance type to use to launch the NAT instances.
    AllowedValues:
    - t3.nano
    - t3.micro
    - t3.small
   

Metadata:
  'AWS::CloudFormation::Interface':

    ParameterGroups:
    - Label:
        default: Instance Configuration
      Parameters:
      - AmiId
      - InstanceType
    - Label:
        default: Proxy Configuration
      

    ParameterLabels:
      AmiId:
        default: AMI ID
      InstanceType:
        default: NAT Instance Type
      

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      Tags:
      - Key: Name
        Value: !Sub 'VPC - ${AWS::StackName}'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub 'IGW - ${AWS::StackName}'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PrivateWorkspaceSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/26
      MapPublicIpOnLaunch: False
      AvailabilityZone: !Select 
      - 0
      - !GetAZs 
        Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub 'Private Subnet 1 - ${AWS::StackName}'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.64/26
      MapPublicIpOnLaunch: False
      AvailabilityZone: !Select 
      - 1
      - !GetAZs 
        Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub 'Private Subnet 2 - ${AWS::StackName}'

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.128/26
      MapPublicIpOnLaunch: True
      AvailabilityZone: !Select 
      - 0
      - !GetAZs 
        Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub 'Public Subnet 1 - ${AWS::StackName}'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.192/26
      MapPublicIpOnLaunch: True
      AvailabilityZone: !Select 
      - 1
      - !GetAZs 
        Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub 'Public Subnet 2 - ${AWS::StackName}'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'Public Route Table - ${AWS::StackName}'

  PublicRouteTableEntry:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteTableSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicRouteTableSubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'Private Route Table 1 - ${AWS::StackName}'

  PrivateRouteTableEntry:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1 
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance      

  PrivateRouteTableSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateWorkspaceSubnet
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub 'Private Route Table 2 - ${AWS::StackName}'

  PrivateRouteTableSubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  NATInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:ListObject
            Resource: '*'
          - Effect: Allow
            Action:
            - ec2:ModifyInstanceAttribute
            Resource: '*'
            
  WorkspaceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security Group for TRE instances to connect with environments, and for environments to connect with interface endpoints'
      GroupName: 'Workspace-SG'
      VpcId: !Ref VPC
  WorkspaceSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WorkspaceSecurityGroup
      SourceSecurityGroupId: !Ref EntryPointSecurityGroup
      Description: 'Allow internet ingress to environments'
      IpProtocol: '-1'

  WorkspaceSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref WorkspaceSecurityGroup
      DestinationSecurityGroupId: !Ref InterfaceEndpointSecurityGroup
      Description: 'Allow Interface Endpoint egress from environments'
      IpProtocol: '-1'

  InterfaceEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security Group for interface endpoints'
      GroupName: 'Interface-Endpoint-SG'
      VpcId: !Ref VPC

  InterfaceEndpointSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InterfaceEndpointSecurityGroup
      SourceSecurityGroupId: !Ref WorkspaceSecurityGroup
      Description: 'Allow environment ingress from interface endpoints'
      IpProtocol: '-1'
  EntryPointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'RG Entry Point Security Group'
      GroupName: 'EntryPointSecurityGroup'
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: '-1'
        - DestinationSecurityGroupId: !Ref WorkspaceSecurityGroup
          IpProtocol: '-1'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'    
    

  NATInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref NATInstanceRole
      Path: /

  NATInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows HTTP and HTTPS from private instances to NAT instances
      SecurityGroupIngress:
      - CidrIp: '10.0.0.0/25'
        FromPort: 22
        ToPort: 22
        IpProtocol: TCP
      - CidrIp: '10.0.0.0/25'
        FromPort: 80
        ToPort: 80
        IpProtocol: TCP
      - CidrIp: '10.0.0.0/25'
        FromPort: 443
        ToPort: 443
        IpProtocol: TCP
      Tags:
      - Key: Name
        Value: !Sub 'NAT Instance SG - ${AWS::StackName}'
      VpcId: !Ref VPC  
      

  NATInstance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref NATInstanceProfile
      InstanceType: !Ref InstanceType
      ImageId: !Ref AmiId   

      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: "8"
            DeleteOnTermination: "true"
            Encrypted: "true"
      PropagateTagsToVolumeOnCreation: true
      Tags:
        - Key: CostCenter
          Value: PG000000
        - Key: CriticalityTier
          Value: Business Operational
        - Key: Compliance
          Value: HIPAA
        - Key: Environment
          Value: QA
        - Key: ApplicationName
          Value: ResearchGatewayQA
        - Key: Department
          Value: DataScience
        - Key: ApplicationCustodian
          Value: txs908
        - Key: ServiceNow
          Value: XXX
        - Key: DepartmentEmail
          Value: txs908@miami.edu
        - Key: UHITOwner
          Value: txs908              
      SecurityGroupIds:
        - !Ref NATInstanceSG 
      SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # Redirect the user-data output to the console logs
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

            # Apply the latest security patches
            yum update -y --security

            # Disable source / destination check. It cannot be disabled from the launch configuration
            region=${AWS::Region}
            instanceid=`curl -s http://169.254.169.254/latest/meta-data/instance-id`
            aws ec2 modify-instance-attribute --no-source-dest-check --instance-id $instanceid --region $region

            # Install and start Squid
            yum install -y squid
            systemctl start squid || service squid start
            iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3129
            iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 3130

            # Create a SSL certificate for the SslBump Squid module
            mkdir /etc/squid/ssl
            cd /etc/squid/ssl 
            openssl genrsa -out squid.key 4096
            openssl req -new -key squid.key -out squid.csr -subj "/C=XX/ST=XX/L=squid/O=squid/CN=squid"
            openssl x509 -req -days 3650 -in squid.csr -signkey squid.key -out squid.crt
            cat squid.key squid.crt >> squid.pem   

            mv /etc/squid/squid.conf /etc/squid/squid.conf.bkp

            touch /etc/squid/squid.conf /etc/squid/whitelist.txt  
            cat > /etc/squid/squid.conf << 'EOF'
            visible_hostname squid
            cache deny all
            access_log /var/log/squid/access.log
            # Log format and rotation
            logformat squid %ts.%03tu %6tr %>a %Ss/%03>Hs %<st %rm %ru %ssl::>sni %Sh/%<a %mt
            logfile_rotate 10
            debug_options rotate=10

            # Handle HTTP requests
            http_port 3128
            http_port 3129 intercept

            # Handle HTTPS requests
            https_port 3130 cert=/etc/squid/ssl/squid.pem ssl-bump intercept
            acl SSL_port port 443
            http_access allow SSL_port
            acl step1 at_step SslBump1
            acl step2 at_step SslBump2
            acl step3 at_step SslBump3
            ssl_bump peek step1 all

            # Deny requests to proxy instance metadata
            acl instance_metadata dst 169.254.169.254
            http_access deny instance_metadata

            # Filter HTTP requests based on the whitelist
            acl allowed_http_sites dstdomain "/etc/squid/whitelist.txt"
            http_access allow allowed_http_sites

            # Filter HTTPS requests based on the whitelist
            acl allowed_https_sites ssl::server_name "/etc/squid/whitelist.txt"
            ssl_bump peek step2 allowed_https_sites
            ssl_bump splice step3 allowed_https_sites
            ssl_bump terminate step2 all
            
            http_access deny all
            EOF

            cat > /etc/squid/whitelist.txt << 'EOF'
            .amazonaws.com
            .google.com
            .docker.com
            .docker.io
            .rlcatalyst.com
            EOF
            systemctl restart squid || service squid restart        
            /opt/aws/bin/cfn-signal -e $? --stack "${AWS::StackName}" --resource "EC2Instance" --region "${AWS::Region}"

               
       

Outputs:
  VPC:
    Description: VPC ID
    Value: !Ref VPC

  VpcPublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
  
  VpcPublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateWorkspaceSubnet:
    Description: Workspace subnet
    Value: !Ref PrivateWorkspaceSubnet 

  EntryPointSecurityGroup:
    Description: Entry Point Security Group
    Value: !Ref EntryPointSecurityGroup
    

  InterfaceEndpointSG:
    Description: Security group of Interface endpoints
    Value: !Ref InterfaceEndpointSecurityGroup
    

  WorkspaceSG:
    Description: Security Group for TRE instances to connect with environments, and for environments to connect with interface endpoints
    Value: !Ref WorkspaceSecurityGroup

  NATInstance:
    Description: NAT instance ID
    Value: !Ref NATInstance 


     
    

 
  
