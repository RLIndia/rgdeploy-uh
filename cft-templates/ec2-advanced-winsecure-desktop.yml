Metadata: 
  License: Apache-2.0
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template to create an GPU based EC2 windows instance with NICE DCV pre installed..'
Parameters:

  Namespace:
    Type: String
    Description: An environment name that will be prefixed to resource names
  Password:
    Type: String
    NoEcho: True
    Description: Administrator Password  
  S3Mounts:
    Type: String
    Description: A JSON array of objects with name, bucket, and prefix properties used to mount data  
  IamPolicyDocument:
    Type: String
    Description: The IAM policy to be associated with the launched workstation 
  VPC:
    Description: The VPC in which the EC2 instance will reside
    Type: AWS::EC2::VPC::Id
  Subnet:
    Description: The VPC subnet in which the EC2 instance will reside
    Type: AWS::EC2::Subnet::Id
  ALBSecurityGroup:
    Description: Security Group Id of the ALB to which the EC2 instance traffic will be allowed from
    Type: AWS::EC2::SecurityGroup::Id    
  WorkSpaceSecurityGroup:  
    Description: Security Group Id of the workspace to which the EC2 instance traffic will be allowed from
    Type: AWS::EC2::SecurityGroup::Id 
  EnvironmentInstanceFiles:
    Type: String
    Description: >-
      An S3 URI (starting with "s3://") that specifies the location of files to be copied to
      the environment instance, including any bootstrap scripts

  InstanceType:
    Description: Choose the instance type e.g t3.medium (2vCPU , 2GiB RAM), t3.large (2vCPU, 8GiB RAM), t3.xlarge(4vCPU, 16GiB RAM)
    Type: String
    Default: t3.medium
    AllowedValues:
      [
        t3.medium,
        t3.large,
        t3.xlarge
      ]
    ConstraintDescription: must be a valid EC2 instance type.
  EBSVolumeSize:
    Description: The initial size of the volume (in GBs)  EBS will use for storage.
    Type: Number
    Default: 64

Conditions:
  IamPolicyEmpty: !Equals [!Ref IamPolicyDocument, '{}']

Resources:

  SSMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join ["-", [Ref: Namespace, "SSM-Policy"]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSMParamActions
            Effect: Allow
            Action:
              - ssm:PutParameter
              - ssm:GetParameter
              - ssm:DescribeParameters
            Resource: "*"          
          - Sid: AllowAccessToEncryptionKeys
            Effect: Allow
            Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey
              - kms:DescribeKey
            Resource: "*"
          - Sid: AllowS3AccessToCentralLogs
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:GetEncryptionConfiguration
            Resource: 
              - arn:aws:s3:::aws-accelerator-central-logs-045912947309-us-east-1/*
              - arn:aws:s3:::aws-accelerator-central-logs-045912947309-us-east-2/*
              - arn:aws:s3:::aws-accelerator-central-logs-045912947309-us-east-1
              - arn:aws:s3:::aws-accelerator-central-logs-045912947309-us-east-2            

  InstanceRolePermissionBoundary:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Permission boundary for EC2 instance role
      ManagedPolicyName: !Join ['-', [Ref: Namespace, 'ec2-windows-permission-boundary']]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:*'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'sts:*'
            Resource: '*'          
          - Effect: Allow
            Action:
              - 'kms:*'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'ssm:*'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'ssmmessages:*'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'ec2messages:*'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'sns:Publish'     
            Resource: '*'                     
          - Effect: Deny
            NotAction:
              - 's3:*'
              - 'ssm:*'
              - 'kms:*'
              - 'sts:*'
            NotResource: '*'   
          

  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', [Ref: Namespace, 'ec2-role']]
      Path: '/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - !If
          - IamPolicyEmpty
          - !Ref 'AWS::NoValue'
          - PolicyName: !Join ['-', [Ref: Namespace, 's3-studydata-policy']]
            PolicyDocument: !Ref IamPolicyDocument
      ManagedPolicyArns:
        - Ref: SSMPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      PermissionsBoundary: !Ref InstanceRolePermissionBoundary        

  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Join ['-', [Ref: Namespace, 'ec2-profile']]
      Path: '/'
      Roles:
        - Ref: IAMRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - config1
        config1:
          files:
            "C:/Users/Administrator/s3_mount.txt":
              content: !Sub |
                ${S3Mounts}    
            "C:/Program Files/ResearchGateway/install_custom_auth.bat":   
              content: |
                echo "compiling custom auth service"
                pip install -r "C:\Program Files\ResearchGateway\win-nice-dcv-auth-svc\requirements.txt"
                echo "Stopping win-nice-dcv-auth-svc"
                sc.exe stop win-nice-dcv-auth-svc
                timeout /t 5 /nobreak
                echo "deleting win-nice-dcv-auth-svc"
                sc.exe delete win-nice-dcv-auth-svc
                echo "Installing win-nice-dcv-auth-svc"
                python "C:\Program Files\ResearchGateway\win-nice-dcv-auth-svc\win-nice-dcv-auth-svc.py" --startup auto install
                echo "Starting win-nice-dcv-auth-svc"
                python "C:\Program Files\ResearchGateway\win-nice-dcv-auth-svc\win-nice-dcv-auth-svc.py" start 
                timeout /t 5 /nobreak               
                echo "running test for win-nice-dcv-auth-svc \n Expected response : <auth result="No"><username>Administrator</username></auth>"
                echo "test result :"
                curl -i -X POST http://localhost:8445 -H "Content-Type: application/x-www-form-urlencoded" -H "Accept: application/xml" -d "sessionId=console&authenticationToken=xxxxx&clientAddress=127.0.0.1"
            "C:/Program Files/ResearchGateway/fix-custom-auth.ps1":   
              content: |
                $serviceName = 'win-nice-dcv-auth-svc'
                $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
                if ($service) {
                    Write-Host "Service '$serviceName' is installed."
                    $svcstatus = ($service.Status )
                    if (!($svcstatus -eq 'Running')) {
                        Write-Host "Starting Service '$serviceName'"
                        Start-Service -Name $serviceName
                    }
                    else {
                        Write-Host "Service '$serviceName' is $svcstatus."
                    }
                    Write-Host "Testing Service '$serviceName'."
                    $output = Start-Process -FilePath "cmd.exe" -ArgumentList "/c curl -i -X POST `"http://localhost:8445`" -H `"Content-Type: application/x-www-form-urlencoded`" -H `"Accept: application/xml`" -d `"sessionId=console&authenticationToken=xxxxx&clientAddress=127.0.0.1`""
                    Write-Host $output
                }
                else {
                    Write-Host "Service '$serviceName' is not installed. Attempting to install"
                    if (Test-Path -Path "C:\\Program Files\\win-nice-dcv-auth-svc\\requirements.txt") {
                        Write-Host "Step 1/3 Installing pre-requisites..."
                        pip install -r "C:\\Program Files\\win-nice-dcv-auth-svc\\requirements.txt"
                    }
                    if (Test-Path -Path "C:\\Program Files\\win-nice-dcv-auth-svc\\win-nice-dcv-auth-svc.py") {
                        Write-Host "Step 2/3 Installing service ..."
                        python "C:\\Program Files\\win-nice-dcv-auth-svc\\win-nice-dcv-auth-svc.py" --startup auto install
                        Write-Host "Step 3/3 Starting service...."
                        python "C:\\Program Files\\win-nice-dcv-auth-svc\\win-nice-dcv-auth-svc.py" start        
                    }
                    $svcstatus = ((Get-Service -Name $serviceName).Status)
                    Write-Host "Service '$serviceName' is $svcstatus."    
                }
            "C:/Program Files/ResearchGateway/set_user_token.bat":
              content: |
                @echo off
                setlocal enabledelayedexpansion
                REM Set PARAMNAMEPREFIX
                setx PARAMNAMEPREFIX /RL/RG/secure-desktop/auth-token/
                REM Get AWS metadata token
                FOR /f "delims=" %%i in ('curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"') do set token=%%i
                REM Get AWS region using the token
                FOR /f "delims=" %%i in ('curl -s "http://169.254.169.254/latest/meta-data/placement/region" -H "X-aws-ec2-metadata-token: !token!"') do set region=%%i
                REM Get instance ID using the token
                FOR /f "delims=" %%i in ('curl -s "http://169.254.169.254/latest/meta-data/instance-id" -H "X-aws-ec2-metadata-token: !token!"') do set instance_id=%%i
                REM Set session ID and generate auth token
                set session_id=console
                set auth_token=%random%-%random%-%random%-%random%-%random%
                set parameter_name=/RL/RG/secure-desktop/auth-token/%instance_id%
                REM Put parameter using AWS SSM
                aws ssm put-parameter --name "%parameter_name%" --type "SecureString" --value "{\"auth_token\":\"%auth_token%\",\"session_id\":\"%session_id%\"}" --region "%region%" --overwrite
                echo User token set successfully
            "C:/Program Files/ResearchGateway/mount_s3.bat":
               content: |
                echo "mounting study"
                Powershell.exe -executionpolicy remotesigned -WindowStyle hidden -File  "C:\Program Files\ResearchGateway\mount_s3.ps1                                 ""
    CreationPolicy:
      ResourceSignal:
        Timeout: "PT20M"   
    Properties:
      LaunchTemplate:
        LaunchTemplateName: "RG-IMDSv2"
        Version: 2              
      UserData:
        Fn::Base64: !Sub |
          <powershell>     
          # Redirect stdout and stderr to a log file and the console
          $scriptPath = "C:\Users\Administrator\log\user-data.log"
          Start-Transcript -Path $scriptPath -Append

          Write-Host "Creating files from config for mounting"
          cfn-init.exe -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets default
          Write-Host "Setting Administrator password"
          net user Administrator ${Password}
          Start-Service -Name 'AmazonSSMAgent'
          
          $rgfolder="C:\\Program Files\\ResearchGateway"
          Write-Host "Downloading latest fixes from ${EnvironmentInstanceFiles}"
          aws s3 cp --region "${AWS::Region}" "${EnvironmentInstanceFiles}/winsecure_desktop/ec2-secure-windows.zip" "C:\\Users\\Administrator"
          if (!(Test-Path -Path $rgfolder )) {
            Write-Host "$rgfolder does not exist. Creating."
            New-Item -Path "$rgfolder" -ItemType "directory" -Force
          }        
          Write-Host "Extracting files to $rgfolder"         
          Expand-Archive -Path "C:\\Users\\Administrator\\ec2-secure-windows.zip" -DestinationPath "$rgfolder" -Force
          & "$rgfolder/install_custom_auth.bat" *> "C:\\Users\\Administrator\\log\\install-custom-auth.log"
          Write-Host "Cleaning up downloaded zip file"
          Remove-Item -Path "C:\\Users\\Administrator\\ec2-secure-windows.zip"
          Write-Host "copying C:\Program Files\ResearchGateway\default.perm to C:\Program Files\NICE\DCV\Server\conf\default.perm"
          Copy-Item -Path "C:\Program Files\ResearchGateway\default.perm" -Destination "C:\Program Files\NICE\DCV\Server\conf\default.perm" -Force
          Write-Host "Restarting dcvserver"
          Restart-Service dcvserver    


         
          Write-Host "Fixing Startup files"
          Copy-Item -Path "C:/Program Files/ResearchGateway/mount_s3.bat" -Destination "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup\" -Force
          Copy-Item -Path "C:/Program Files/ResearchGateway/set_user_token.bat" -Destination "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup\" -Force

          Write-Host "Setting user token"
          & "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup\set_user_token.bat"
          if (Test-Path -Path "$rgfolder\\startup.ps1") {
            Write-Host "Found startup script. Executing."
            & "$rgfolder\\startup.ps1"
          }

          cfn-signal.exe -e 0 --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}
          # End the transcript (stop logging)
          Stop-Transcript
          </powershell>
          <persist>true</persist>                   
      InstanceType: !Ref 'InstanceType'
      ImageId: "{{resolve:ssm:/RL/RG/StandardCatalog/adv-windows-nice-dcv-ami}}"
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref EBSVolumeSize
            Encrypted: true    
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          GroupSet:
            - !Ref InstanceSecurityGroup
            - !Ref WorkSpaceSecurityGroup
          SubnetId: !Ref Subnet            
      PropagateTagsToVolumeOnCreation: true
      Tags:
        - Key: CostCenter
          Value: PG000000
        - Key: CriticalityTier
          Value: Business Operational
        - Key: Compliance
          Value: HIPAA
        - Key: Environment
          Value: PROD
        - Key: ApplicationName
          Value: ResearchGatewayPROD
        - Key: Department
          Value: DataScience
        - Key: ApplicationCustodian
          Value: txs908
        - Key: ServiceNow
          Value: XXX
        - Key: DepartmentEmail
          Value: txs908@miami.edu
        - Key: UHITOwner
          Value: txs908     
        - Key: cost_resource
          Value: !Sub ${AWS::StackName}
        - Key: Name
          Value: !Join ["-", [Ref: Namespace, "ec2-windows"]]  
        - Key: PatchGroup
          Value: RG-PatchGroup-Windows     
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 workspace security group
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
          
      SecurityGroupIngress:     
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443      
          SourceSecurityGroupId: !Ref ALBSecurityGroup         
      VpcId: !Ref VPC           

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance'
 
  AvailabilityZone: 
    Description: AvailabilityZone of newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]
