Metadata:
  License: Apache-2.0
AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS CloudFormation Template to create an GPU based EC2 instance with NICE-DCV pre installed."

Parameters:
  Namespace:
    Type: String
    Description: An environment name that will be prefixed to resource names
  S3Mounts:
    Type: String
    Description: A JSON array of objects with name, bucket, and prefix properties used to mount data
  IamPolicyDocument:
    Type: String
    Description: The IAM policy to be associated with the launched workstation
  VPC:
    Description: The VPC in which the EC2 instance will reside
    Type: AWS::EC2::VPC::Id
  Subnet:
    Description: The VPC subnet in which the EC2 instance will reside
    Type: AWS::EC2::Subnet::Id
  ALBSecurityGroup:
    Description: Security Group Id of the ALB to which the EC2 instance traffic will be allowed from
    Type: AWS::EC2::SecurityGroup::Id    
  WorkSpaceSecurityGroup:  
    Description: Security Group Id of the workspace to which the EC2 instance traffic will be allowed from
    Type: AWS::EC2::SecurityGroup::Id 
  EnvironmentInstanceFiles:
    Type: String
    Description: >-
      An S3 URI (starting with "s3://") that specifies the location of files to be copied to
      the environment instance, including any bootstrap scripts
     
  InstanceType:
    Description: Choose the instance type e.g t3.medium (2vCPU , 2GiB RAM), t3.large (2vCPU, 8GiB RAM), t3.xlarge(4vCPU, 16GiB RAM)
    Type: String
    Default: t3.medium
    AllowedValues:
      [
        t3.medium,
        t3.large,
        t3.xlarge,
        
      ]
    ConstraintDescription: must be a valid EC2 instance type.
  EBSVolumeSize:
    Description: The initial size of the volume (in GBs)  EBS will use for storage.
    Type: Number
    Default: 64  

Conditions:
  IamPolicyEmpty: !Equals [!Ref IamPolicyDocument, "{}"]

Resources:
  SSMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join ["-", [Ref: Namespace, "SSM-Policy"]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSMParamActions
            Effect: Allow
            Action:
              - ssm:PutParameter
              - ssm:GetParameter
              - ssm:DescribeParameters
          - Sid: AllowAccessToEncryptionKeys
            Effect: Allow
            Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey
              - kms:DescribeKey
            Resource: "*"
          - Sid: AllowS3AccessToCentralLogs
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:GetEncryptionConfiguration
            Resource: 
              - arn:aws:s3:::aws-accelerator-central-logs-045912947309-us-east-1/*
              - arn:aws:s3:::aws-accelerator-central-logs-045912947309-us-east-2/*
              - arn:aws:s3:::aws-accelerator-central-logs-045912947309-us-east-1
              - arn:aws:s3:::aws-accelerator-central-logs-045912947309-us-east-2 
  InstanceRolePermissionBoundary:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Permission boundary for EC2 instance role
      ManagedPolicyName: !Join ['-', [Ref: Namespace, 'ec2-linux-permission-boundary']]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:*'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'sts:*'
            Resource: '*'          
          - Effect: Allow
            Action:
              - 'kms:*'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'ssm:*'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'ssmmessages:*'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'ec2messages:*'
            Resource: '*'
          - Effect: Deny
            NotAction:
              - 's3:*'
              - 'ssm:*'
              - 'kms:*'
              - 'sts:*'
            NotResource: '*'   
          
  IAMRole:
  
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', [Ref: Namespace, 'ec2-role']]
      Path: '/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - !If
          - IamPolicyEmpty
          - !Ref 'AWS::NoValue'
          - PolicyName: !Join ['-', [Ref: Namespace, 's3-studydata-policy']]
            PolicyDocument: !Ref IamPolicyDocument
      ManagedPolicyArns:
        - Ref: SSMPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      PermissionsBoundary: !Ref InstanceRolePermissionBoundary



  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: !Join ["-", [Ref: Namespace, "ec2-profile"]]
      Path: "/"
      Roles:
        - Ref: IAMRole         

  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - config1
            - config2
        config1:
          files:
            "/home/ec2-user/.config/autostart/studymount.desktop":
              mode: "000644"
              owner: "ec2-user"
              group: "ec2-user"
              content: |
                [Desktop Entry]
                Type=Application
                Exec="/home/ec2-user/mount_study.sh"
                Hidden=false
                NoDisplay=false
                X-GNOME-Autostart-enabled=true
                Terminal=true
                Name=Study-Mounting
                Comment=Study Mounting
            "/home/ec2-user/.config/autostart/jupyter.desktop":
              mode: "000644"
              owner: "ec2-user"
              group: "ec2-user"
              content: |
                [Desktop Entry]
                Type=Application
                Exec="/home/ec2-user/jupyter.sh"
                Hidden=false
                NoDisplay=false
                X-GNOME-Autostart-enabled=true
                Terminal=true
                Name=JupyterLab
                Comment=Icon for Jupyter
            "/home/ec2-user/.config/autostart/rstudio.desktop":
              mode: "000644"
              owner: "ec2-user"
              group: "ec2-user"
              content: |
                [Desktop Entry]
                Type=Application
                Exec="/home/ec2-user/rstudio.sh"
                Hidden=false
                NoDisplay=false
                X-GNOME-Autostart-enabled=true
                Terminal=true
                Name=rstudio-server
                Comment=Icon for rstudio              
            
              
            "/home/ec2-user/rstudio.sh":
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
              content: |
                #!/bin/bash
                url="http://localhost:8787/"
                link_name="RStudio"
                custom_icon="/home/ec2-user/logos/black.png"
                mkdir -p $HOME/Desktop
                desktop_file="$HOME/Desktop/rstudio.desktop"
                cat > "$desktop_file" <<EOL
                [Desktop Entry]
                Name=$link_name
                Type=Link
                URL=$url
                Icon=$custom_icon
                EOL
                chmod +x "$desktop_file"   
            "/home/ec2-user/jupyter.sh":
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
              content: |
                #!/bin/bash
                
                sleep 2
                jtoken=$(sudo docker exec jupyterlab /bin/bash -c "jupyter server list" 2>&1 | grep token | awk '{print $2}' | sed 's/.*=//')

                if [ -n "$jtoken" ]; then
 
                    echo "Token value: $jtoken"
                else
                    echo "Error: Unable to retrieve the Jupyter token."
                fi
                url="http://127.0.0.1:8888/?token=$jtoken"
                link_name="JupyterLab"
                custom_icon="/home/ec2-user/logos/main-logo.svg"
                mkdir -p $HOME/Desktop
                desktop_file="$HOME/Desktop/jupyter.desktop"
                cat > "$desktop_file" <<EOL
                [Desktop Entry]
                Name=$link_name
                Type=Link
                URL=$url
                Icon=$custom_icon
                EOL
                chmod +x "$desktop_file"    
            "/home/ec2-user/mount_study.sh":
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
              content: |
                #!/bin/sh
                set -x
                # Adding sleep to avoid mounting failure
                sleep 30
                mount_s3.sh 2>&1 >> /home/ec2-user/mount_s3.log
            "/home/ec2-user/start_jupyter.sh":
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
              content: |
                #!/bin/bash
                service_name="jupyterlab"
                timeout=20
                elapsed_time=0

                echo "Waiting for $service_name to become active..."
                sleep 30
                while true; do
                  if [ -n "$(sudo docker ps -f "name=$service_name" -f "status=running" -q )" ]; then
                    echo "the $service_name container is running!"
                    sudo /home/ec2-user/jupyter.sh
                    break
                  fi

                  if [[ $elapsed_time -ge $timeout ]]; then
                    echo "Timeout: $service_name did not become active within $timeout seconds."
                    break
                  fi
                    sudo docker run --rm -d --name jupyterlab -p 8888:8888 -v /home/ec2-user:/home/ec2-user relevancelab/jupiterlab_3.5.0:1.0.3
                  sleep 1
                  elapsed_time=$((elapsed_time+1))
                done
            "/home/ec2-user/start_rstudio.sh":
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
              content: |
                #!/bin/bash
                set -x
                sleep 30
                sudo docker run --rm -d --name rstudio -e DISABLE_AUTH=true -v /home/ec2-user:/home/ec2-user -p 8787:8787 relevancelab/rstudio_4.2.1:1.0.3                
            "/home/ec2-user/set_user_token.sh":
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
              content: !Sub |
                #!/bin/bash
                trap "Error setting user token. You may not be able to access your instance URL"  ERR
                # Get the session token
                TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
                
                # Get the region to build the parameter name
                region=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/region)
                echo "Retrieved region ${region} from metadata service"
                
                # Get the instance id to build the parameter name
                instance_id=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
                echo "Retrieved instance_id $instance_id from metadata service"
            "/home/ec2-user/supervisor/supervisord.conf":
              mode: "000644"
              owner: "ec2-user"
              group: "ec2-user"
              content: |
                [unix_http_server]
                file=/home/ec2-user/supervisor/supervisor.sock   ; the path to the socket file

                [supervisord]
                logfile=/home/ec2-user/supervisor/supervisord.log ; main log file; default $CWD/supervisord.log
                logfile_maxbytes=50MB                  ; max main logfile bytes b4 rotation; default 50MB
                logfile_backups=10                     ; # of main logfile backups; 0 means none, default 10
                loglevel=info                          ; log level; default info; others: debug,warn,trace
                pidfile=/home/ec2-user/supervisor/supervisord.pid ; supervisord pidfile; default supervisord.pid
                nodaemon=false                         ; start in foreground if true; default false
                minfds=1024                            ; min. avail startup file descriptors; default 1024
                minprocs=200                           ; min. avail process descriptors;default 200

                [rpcinterface:supervisor]
                supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

                [supervisorctl]
                serverurl=unix:///home/ec2-user/supervisor/supervisor.sock ; use a unix:// URL  for a unix socket

                [program:dcv-custom-auth]
                command=docker run --rm -p 8445:8445 -e PORT=8445 -e PARAMNAMEPREFIX=/RL/RG/secure-desktop/auth-token/ relevancelab/nice-dcv-auth-svc:latest  ; the program (relative uses PATH, can take args)
                directory=/home/ec2-user                                                                                                            ; directory to cwd to before exec (def no cwd)
                user=ec2-user                                                                                                                       ; setuid to this UNIX account to run the program
                redirect_stderr=true                                                                                                                ; redirect proc stderr to stdout (default false)
                stdout_logfile=/home/ec2-user/supervisor/cust_auth.log
            "/home/ec2-user/supervisor/supervisord.log":
              content: "\n"
              mode: "000664"
              owner: "ec2-user"
              group: "ec2-user"
            "/home/ec2-user/supervisor/cust_auth.log":
              content: "\n"
              mode: "000664"
              owner: "ec2-user"
              group: "ec2-user"
            "/home/ec2-user/disable_lock.sh":
              content: !Sub |
                #!/bin/bash
                gsettings set org.gnome.desktop.lockdown disable-lock-screen 'true'
                echo "Lock disabled successfully"
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user" 
        config2:
          commands:
            01_start_ext_auth:
              cwd: "/home/ec2-user/supervisor"
              command: "/usr/local/bin/supervisord"
            02_set_user_token:
              cwd: "/home/ec2-user"
              command: "/home/ec2-user/set_user_token.sh"                           
            03_start_rstudio:
              cwd: "/home/ec2-user"
              command: "/home/ec2-user/start_rstudio.sh"
            04_start_jupyter:
              cwd: "/home/ec2-user" 
              command: "/home/ec2-user/start_jupyter.sh"               
    Properties:
      LaunchTemplate:
        LaunchTemplateName: "RG-IMDSv2"
        Version: 2
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          #trap '/opt/aws/bin/cfn-signal --exit-code 1 --resource EC2Instance --region ${AWS::Region} --stack ${AWS::StackName}' ERR
          yum update -y
          # Download and install the SSM Agent
          yum install -y "https://s3.${AWS::Region}.amazonaws.com/amazon-ssm-region/latest/linux_amd64/amazon-ssm-agent.rpm"

          # Start and enable the SSM Agent
          systemctl start amazon-ssm-agent
          systemctl enable amazon-ssm-agent

          # Check if the SSM Agent is running (for logging purposes)
          systemctl status amazon-ssm-agent          
          # Copy environment instance files needed for the workspace
          aws s3 cp --region "${AWS::Region}" "${EnvironmentInstanceFiles}/secure_desktop/secure_desktop.perm" "/etc/dcv/"
          aws s3 cp --region "${AWS::Region}" "${EnvironmentInstanceFiles}/get_bootstrap_rhel.sh" "/tmp"
          chmod 500 "/tmp/get_bootstrap_rhel.sh"
          /tmp/get_bootstrap_rhel.sh "${EnvironmentInstanceFiles}" '${S3Mounts}' "" "${AWS::Region}"

          # Route auth request to external authenticator and restart dcv
          /usr/local/bin/crudini --set /etc/dcv/dcv.conf security auth-token-verifier \"http://127.0.0.1:8445\"
          
          sudo systemctl restart dcvserver

          # Create dcv session start script
          cat << 'EOF' > /usr/local/bin/start-dcv-session
           #!/bin/bash
            service_name="dcvserver"
            timeout=20
            elapsed_time=0

            echo "Waiting for $service_name to become active..."

            while true; do
            status=$(systemctl is-active $service_name)
            if [[ $status == "active" ]]; then
              echo "$service_name is now active."
              break
            fi

            if [[ $elapsed_time -ge $timeout ]]; then
              echo "Timeout: $service_name did not become active within $timeout seconds."
              break
            fi

            sleep 1
            elapsed_time=$((elapsed_time+1))
            done
          dcv create-session rg-session --name rg-session --user ec2-user --owner ec2-user --permissions-file /etc/dcv/secure_desktop.perm
          dcv list-sessions
          date
          EOF

          # Create dcv session on reboot
          chown root: "/usr/local/bin/start-dcv-session"
          chmod 775 "/usr/local/bin/start-dcv-session"
          sh "/usr/local/bin/start-dcv-session"

          sleep 5

          # Run init script to create files
          /usr/local/bin/cfn-init --verbose --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}

          # Add command to start on reboot
          crontab -l 2>/dev/null > "/tmp/crontab"
          sh "/usr/local/bin/start-dcv-session"
          echo '@reboot cd /home/ec2-user/supervisor && /usr/local/bin/supervisord 2>&1 >> /home/ec2-user/supervisor/cust_auth.log' >> "/tmp/crontab"
          echo '@reboot /usr/local/bin/start-dcv-session 2>&1 >> /var/log/start-dcv-session.log' >> "/tmp/crontab"
          echo '@reboot su - ec2-user -c /home/ec2-user/set_user_token.sh 2>&1 >> /var/log/set_user_token.log' >> "/tmp/crontab"
          echo '@reboot /home/ec2-user/start_rstudio.sh' >> "/tmp/crontab"
          echo '@reboot /home/ec2-user/start_jupyter.sh' >> "/tmp/crontab"
          crontab "/tmp/crontab"


          # # Restart DCV session to start dcv-session
          # dcv close-session rg-session
          # sh "/usr/local/bin/start-dcv-session"

          # Remove password and lock for ec2-user
          passwd -l ec2-user
          dcv create-session lock-session --name lock-session --user ec2-user --owner ec2-user --init /home/ec2-user/disable_lock.sh


          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}          
      InstanceType: !Ref 'InstanceType'
      ImageId: "{{resolve:ssm:/RL/RG/StandardCatalog/rhelinux-nice-dcv-ami}}"
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: CostCenter
          Value: PG000000
        - Key: CriticalityTier
          Value: Business Operational
        - Key: Compliance
          Value: HIPAA
        - Key: Environment
          Value: QA
        - Key: ApplicationName
          Value: ResearchGatewayQA
        - Key: Department
          Value: DataScience
        - Key: ApplicationCustodian
          Value: txs908
        - Key: ServiceNow
          Value: XXX
        - Key: DepartmentEmail
          Value: txs908@miami.edu
        - Key: UHITOwner
          Value: txs908
        - Key: Name
          Value: !Join ['-', [Ref: Namespace, 'ec2-linux']]
        - Key: Description
          Value: EC2 workspace instance
        - Key: cost_resource
          Value: !Sub ${AWS::StackName}
        - Key: PatchGroup
          Value: RG-PatchGroup-RHEL      
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref EBSVolumeSize
            Encrypted: true

      NetworkInterfaces:
        - AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          GroupSet:
            - !Ref InstanceSecurityGroup
            - !Ref WorkSpaceSecurityGroup
          SubnetId: !Ref Subnet  
      PropagateTagsToVolumeOnCreation: true            

    
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 workspace security group
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
          
      SecurityGroupIngress:     
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443      
          SourceSecurityGroupId: !Ref ALBSecurityGroup   
      VpcId: !Ref VPC

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref "EC2Instance"

  ApplicationPort:
    Description: The Port in which the application is running
    Value: "8443"
  AvailabilityZone: 
    Description: AvailabilityZone of newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]    
